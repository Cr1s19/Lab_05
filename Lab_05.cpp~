#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>

using namespace std; // std:: is implied.

//Get the classification of the examples in a set (column)
//Returns a vector of pairs: [ (none, 15), (soft, 5), (hard, 4) ]
vector< pair< string, int > > probability(vector<string> attribute)
{
    int count;
    string name;
    vector< pair< string, int > > prob;

    sort(attribute.begin(), attribute.end());
    name = attribute[0];
    count = 1;
    for( int i = 1; i < attribute.size(); i++ )
    {
        if( attribute[i] != name )
        {
            prob.push_back( make_pair(name, count) );
            name = attribute[i];
            count = 1;
        }   
        else
        {
            count++;
        }
    }
    return prob;
}

//Get the number of examples by attibute given the target
//Returns a vector of pairs: [ (youngnone, 4), (youngsoft, 2), (younghard, 2), (pre-presbyopicnone, 5), (pre-presbyopicsoft, 2), (pre-presbyopichard, 1), ...  ]
vector< pair< string, int > > subsetProbability(vector<string> predictor, vector<string> target)
{
    int count;
    string actual;
    vector<string> key;
    vector< pair< string, int > > subsetProb;

    for( int i = 0; i < predictor.size(); i++ )
    {
        key.push_back( predictor[i] + target[i] );                
    }
    sort( key.begin(), key.end() );

    actual = key[0];
    count = 1;
    for(int i = 1; i < key.size(); i++ )
    {
        if( actual != key[i] )
        {
            subsetProb.push_back( make_pair(actual, count) );
            actual = key[i];
            count = 1;
        }
        else
        {
            count++;
        }
    }
    return subsetProb;
}

float entropy( vector< pair< string, int > > probability)
{
    float result = 0.0;
    float total = 0.0;

    for(int i = 0; i < probability.size(); i++ )
    {
        total += probability[i].second;  
    }

    for(int i = 0; i < probability.size(); i++ )
    {
        result -= (probability[i].second / total ) * log2f( (probability[i].second / total ) );        
    }
    return result;
}

//Calcuate the subset entropy
//Uses the vectors returned by probability() and subProbability() to look for the attributes to count
float subsetEntropy( vector< pair< string, int > > prob, vector< pair< string, int >  > subsetProb )
{
    string attribute;
    float result = 0.0;
    vector< pair< string, int > > valuesToEntropy;

    for( int i = 0; i < prob.size(); i++ )
    {
        attribute = prob[i].first;
        while(subsetProb.size() > 0)
        {
            if( subsetProb.front().first.substr(0, attribute.length()) == attribute)
            {
                valuesToEntropy.push_back( attribute, subsetProb.front() );    
                subsetProb.erase( subsetProb.begin() );
            }
            else
            {
                break;
            }
        }
        result += prob[i].second * entropy( valuesToEntropy );
        valuesToEntropy.clear();
    }
    return result;
}

float calculateGain( float targetEntropy, float subEntropy )
{
    return targetEntropy - subEntropy;
}

//Get the gain for each attribute and choose the one with the max gain
//Returns the name of the attribute to split on
string chooseAttribute( vector<string> names, vector< vector< string > > dataSet )
{
    float targetEntropy;
    float subEntropy;
    float gain, maxGain;
    string choosenAttribute;

    maxGain = 0;
    targetEntropy = entropy( probability( dataSet.back() ) );
    for(int  i = 0; i < dataSet.size() - 1; i++)
    {
        subEntropy = subsetEntropy( probability( dataSet[i] ),  subsetProbability( dataSet[i], dataSet.back() ));
        gain = calculateGain(targetEntropy, subEntropy);

        if(gain > maxGain)
        {
            maxGain = gain;
            choosenAttribute = names[i];
        }
    }
    return choosenAttribute;
}

//void createNewDataSetAfterSplit

/*
void createTree()
{

}
*/

void split(string& s, char delim, vector<string>& v)
{
    int i = 0;
    char pos = s.find(delim);

    if(s.back() == ' ')
    {
        s.pop_back();
    }

    while (pos != string::npos) 
    {
        v.push_back(s.substr(i, pos-i));
        i = ++pos; 

        if(s[i] == ' '){
            i++;
        }
        pos = s.find(delim, pos);

        if (pos == string::npos)
        {
            v.push_back(s.substr(i, s.length()));
        }
    }
}

struct node{
	string name;
	vector<string> type;
};

int main(int arg, char** argv)
{
	vector<string> v, v1, v2, attributes;
	vector< vector< string > > data;
	string relation;
	string s;

	while(getline(cin, s))
    {
			if(s[0] != '%' && !s.empty())
            {
				//read only @
				if(s[0] == '@'){
					//lecture of relation
					if (s[1] == 'r'){
						//saving the relation in a string
						split(s,' ',v);
						string relation = v[v.size()-1];
						// cout<< relation << "\n";
						v.clear();

					}
					//lecture of attribute
					if (s[1] == 'a'){
						// split the the string in name and attributes
						split(s,'{',v);
						cout << v[0]<< "\n";

						//split the @attribute and name
						split(v[0],' ',v1);
						cout << v1[1]<< "\n";

						//split the attributes by a ,
						split(v[1],',',v2);
						cout << v2[v2.size()-1]<< "\n";

						//clear the vector to recive the next attributes correctly
						v.clear();
						v1.clear();
						v2.clear();
					}
				}
				//lectura de @data
				split(s,',',v);
				cout << v[0]<< "\n";
				v.clear();
				cout << s << "\n"; 
			}
	}
	return 0;
}
